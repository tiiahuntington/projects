<!DOCTYPE html>
<html lang="fi" xmlns="http://www.w3.org/1999/xhtml" xml:lang="fi">
  <head>
    <!-- head-osan sisältöä ei saa muuttaa -->
    <script src="https://appro.mit.jyu.fi/tiea2120/vt/vt3/2021/data2021.js"></script>
    <script src="vt3.js"></script>
    <link rel="StyleSheet" href="tyylit.css" type="text/css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="utf-8" />
    <title>Tulospalvelu</title>
  </head>
  <body>
    <!-- Tämän tiedoston sisältöä saa muuttaa vapaasti tästä kommentista eteenpäin
 Kirjoita mahdollisimman paljon valmista HTML-koodia ja luo javascriptilla dynaamisesti
 vain tarpeelliset kuten leimaustapojen ja sarjojen valinta sekä joukkuelistaus
  -->
    <h1>Tulospalvelu</h1>
    <form
      id="form"
      action="http://appro.mit.jyu.fi/cgi-bin/view.cgi"
      method="post"
    >
      <fieldset>
        <legend>Joukkueen tiedot</legend>
        <p>
          <label for="joukkuenimi">Nimi</label>
          <input
            id="joukkuenimi"
            type="text"
            name="nimi"
            value=""
            title="Anna joukkueen nimi"
          />
        </p>
        <div>
          <span>Leimaustapa</span>
          <div id="leimaustapa" class="leimaustapa"></div>
        </div>
        <div class="sarjaotsikko">
          <span>Sarja </span>
          <div id="sarja" class="sarja"></div>
        </div>
      </fieldset>
      <fieldset>
        <legend>Jäsenet</legend>
        <p id="j0">
          <label for="jasen1">Jäsen 1</label>
          <input id="jasen1" type="text" value="" />
        </p>
        <p id="j1">
          <label for="jasen2">Jäsen 2</label>
          <input id="jasen2" type="text" value="" />
        </p>
      </fieldset>
      <fieldset>
        <legend>Leimaukset</legend>
        <table id="rastit">
          <tr>
            <th>Koodi</th>
            <th>Aika</th>
            <th>Poista</th>
          </tr>
        </table>
      </fieldset>
      <p><input type="submit" value="Tallenna" id="tallennanappi" /></p>
    </form>

    <form action="http://appro.mit.jyu.fi/cgi-bin/view.cgi"
    method="post">
      <fieldset>
        <legend>Uusi leimaustapa</legend>
        <p>
          <label for="leimaustapanimi">Leimaustavan nimi</label>
          <input type="text" id="leimaustapanimi" value="" />
        </p>
      </fieldset>
      <p><input type="submit" value="Tallenna" id="tallennanappileimaus" /></p>
    </form>

    <p class="joukkueetlistaus">
      <ul id="joukkueet"></ul>
    </p>
    

    <!-- Tästä eteenpäin sivun sisältöä ei saa muuttaa -->
    <!-- Sivun validoinnin voit tehdä milloin tahansa näppäinyhdistelmällä CTRL+ALT+V -->
    <script src="https://appro.mit.jyu.fi/tools/htmlinspector/html-inspector.js"></script>
    <script src="https://appro.mit.jyu.fi/tools/validator/validator.user.js"></script>
    <script src="https://appro.mit.jyu.fi/tools/jshint/jshint.js"></script>
    <script src="https://appro.mit.jyu.fi/tools/jshint/jshint.user.js"></script>
    <script>
      //<![CDATA[
      // seurataan DOM-puuhun tehtyjä muutoksia. Validoidaan dokumentti, jos DOM-puuta
      // muutetaan. Tämä hidastaa merkittävästi sovellusta, mutta auttaa bongaamaan
      // epävalidit muutokset sivun rakenteeseen
      // kts. https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
      function observe() {
        // asetukset
        const config = { attributes: true, childList: true, subtree: true };
        // ajastuksen apumuuttuja
        let timer = true;

        // seuraava funktio suoritetaan, jos dokumentin sisältö muuttuu
        function validointi() {
          HTMLInspector.inspect({
            domRoot: "html",
            useRules: null,
            excludeRules: ["script-placement", "unnecessary-elements"],
            excludeElements: "svg",
            excludeSubTrees: ["svg", "iframe"],
            onComplete: function (errors) {
              errors.forEach(function (error) {
                console.warn(error.message, error.context);
              });
            },
          });

          timer = true;
        }

        // muutosten seuranta
        const callback = function (mutationsList, observer) {
          for (let mutation of mutationsList) {
            if (
              timer &&
              (mutation.type === "childList" || mutation.type === "attributes")
            ) {
              // emme halua suorittaa validointia jokaisen pienen muutoksen
              // jälkeen joten ajetaan validointia viivästettynä, jotta mahdollisia
              // muutoksia ehtii tulla enemmän kerralla
              window.setTimeout(validointi, 500);
              timer = false;
              //	            console.log(mutation);
            }
          }
        };

        // luodaan varsinainen tapahtumankuuntelija
        const observer = new MutationObserver(callback);

        // aktivoidaan kuuntelija dokumentin body-elementille
        observer.observe(document.body, config);
      }
      window.addEventListener("load", observe);
      //]]>
    </script>
  </body>
</html>
