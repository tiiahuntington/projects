package menu.test;
// Generated by ComTest BEGIN
import java.util.ArrayList;
import static org.junit.Assert.*;
import org.junit.*;
import menu.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.28 13:30:10 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class MenuTest {



  // Generated by ComTest BEGIN
  /** testAnnaAteria110 */
  @Test
  public void testAnnaAteria110() {    // Menu: 110
    Menu menu = new Menu(); 
    Ateria salaatti = new Ateria(); 
    salaatti.rekisteroi(); 
    menu.lisaa(salaatti); 
    Ateria keitto = new Ateria(); 
    keitto.rekisteroi(); 
    menu.lisaa(keitto); 
    try {
    assertEquals("From: Menu line: 118", salaatti, menu.annaAteria(2)); 
    fail("Menu: 118 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    Ateria keitto2 = new Ateria(); 
    keitto2.rekisteroi(); 
    menu.lisaa(keitto2); 
    menu.lisaa(keitto2); 
    menu.poista(keitto2); 
    menu.poista(keitto2); 
    menu.lisaaPaikkaan(3, keitto2); 
    assertEquals("From: Menu line: 126", salaatti, menu.annaAteria(0)); 
    assertEquals("From: Menu line: 127", keitto, menu.annaAteria(1)); 
    assertEquals("From: Menu line: 128", null, menu.annaAteria(2)); 
    assertEquals("From: Menu line: 129", keitto2, menu.annaAteria(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaAterianRaakaAine142 */
  @Test
  public void testAnnaAterianRaakaAine142() {    // Menu: 142
    Menu menu = new Menu(); 
    AterianRaakaAine salaatinTomaatti = new AterianRaakaAine(); 
    salaatinTomaatti.rekisteroi(); 
    menu.lisaa(salaatinTomaatti); 
    AterianRaakaAine keitonSipuli = new AterianRaakaAine(); 
    keitonSipuli.rekisteroi(); 
    menu.lisaa(keitonSipuli); 
    assertEquals("From: Menu line: 150", salaatinTomaatti, menu.annaAterianRaakaAine(0)); 
    assertEquals("From: Menu line: 151", keitonSipuli, menu.annaAterianRaakaAine(1)); 
    try {
    assertEquals("From: Menu line: 152", keitonSipuli, menu.annaAterianRaakaAine(2)); 
    fail("Menu: 152 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAine165 */
  @Test
  public void testAnnaRaakaAine165() {    // Menu: 165
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    tomaatti.rekisteroi(); 
    menu.lisaa(tomaatti); 
    RaakaAine sipuli = new RaakaAine(); 
    sipuli.rekisteroi(); 
    menu.lisaa(sipuli); 
    assertEquals("From: Menu line: 173", tomaatti, menu.annaRaakaAine(0)); 
    assertEquals("From: Menu line: 174", sipuli, menu.annaRaakaAine(1)); 
    try {
    assertEquals("From: Menu line: 175", sipuli, menu.annaRaakaAine(2)); 
    fail("Menu: 175 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAineenTyyppi188 */
  @Test
  public void testAnnaRaakaAineenTyyppi188() {    // Menu: 188
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); 
    menu.lisaa(kasvis); 
    RaakaAineenTyyppi pasta = new RaakaAineenTyyppi(); 
    pasta.rekisteroi(); 
    menu.lisaa(pasta); 
    assertEquals("From: Menu line: 196", kasvis, menu.annaRaakaAineenTyyppi(0)); 
    assertEquals("From: Menu line: 197", pasta, menu.annaRaakaAineenTyyppi(1)); 
    try {
    assertEquals("From: Menu line: 198", null, menu.annaRaakaAineenTyyppi(2)); 
    fail("Menu: 198 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaAteriaIdlla212 */
  @Test
  public void testAnnaAteriaIdlla212() {    // Menu: 212
    Menu menu = new Menu(); 
    Ateria salaatti = new Ateria(); 
    salaatti.rekisteroi(); 
    menu.lisaa(salaatti); 
    Ateria keitto = new Ateria(); 
    keitto.rekisteroi(); 
    menu.lisaa(keitto); 
    assertEquals("From: Menu line: 220", salaatti, menu.annaAteriaIdlla(2)); 
    assertEquals("From: Menu line: 221", keitto, menu.annaAteriaIdlla(3)); 
    try {
    assertEquals("From: Menu line: 222", keitto, menu.annaAteriaIdlla(4)); 
    fail("Menu: 222 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAineIdlla235 */
  @Test
  public void testAnnaRaakaAineIdlla235() {    // Menu: 235
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    tomaatti.rekisteroi(); 
    menu.lisaa(tomaatti); 
    RaakaAine sipuli = new RaakaAine(); 
    sipuli.rekisteroi(); 
    menu.lisaa(sipuli); 
    assertEquals("From: Menu line: 243", tomaatti, menu.annaRaakaAineIdlla(101)); 
    assertEquals("From: Menu line: 244", sipuli, menu.annaRaakaAineIdlla(102)); 
    try {
    assertEquals("From: Menu line: 245", sipuli, menu.annaRaakaAineIdlla(3)); 
    fail("Menu: 245 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAineenTyyppiIdlla258 */
  @Test
  public void testAnnaRaakaAineenTyyppiIdlla258() {    // Menu: 258
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); 
    menu.lisaa(kasvis); 
    RaakaAineenTyyppi pasta = new RaakaAineenTyyppi(); 
    pasta.rekisteroi(); 
    menu.lisaa(pasta); 
    assertEquals("From: Menu line: 266", kasvis, menu.annaRaakaAineenTyyppiIdlla(9)); 
    assertEquals("From: Menu line: 267", pasta, menu.annaRaakaAineenTyyppiIdlla(10)); 
    try {
    assertEquals("From: Menu line: 268", null, menu.annaRaakaAineenTyyppiIdlla(11)); 
    fail("Menu: 268 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaAteriaIndex283 */
  @Test
  public void testAnnaAteriaIndex283() {    // Menu: 283
    Menu menu = new Menu(); 
    Ateria salaatti = new Ateria(); 
    salaatti.rekisteroi(); 
    menu.lisaa(salaatti); 
    Ateria keitto = new Ateria(); 
    keitto.rekisteroi(); 
    menu.lisaa(keitto); 
    assertEquals("From: Menu line: 291", 0, menu.annaAteriaIndex(salaatti.getAteriaId())); 
    assertEquals("From: Menu line: 292", 1, menu.annaAteriaIndex(keitto.getAteriaId())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaAterianRaakaAineIndex310 */
  @Test
  public void testAnnaAterianRaakaAineIndex310() {    // Menu: 310
    Menu menu = new Menu(); 
    AterianRaakaAine salaatinTomaatti = new AterianRaakaAine(); 
    salaatinTomaatti.rekisteroi(); 
    menu.lisaa(salaatinTomaatti); 
    AterianRaakaAine keitonSipuli = new AterianRaakaAine(); 
    keitonSipuli.rekisteroi(); 
    menu.lisaa(keitonSipuli); 
    assertEquals("From: Menu line: 318", 0, menu.annaAterianRaakaAineIndex(salaatinTomaatti.getAteriaId())); 
    assertEquals("From: Menu line: 319", 1, menu.annaAterianRaakaAineIndex(keitonSipuli.getAteriaId())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAineIndex337 */
  @Test
  public void testAnnaRaakaAineIndex337() {    // Menu: 337
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    tomaatti.rekisteroi(); 
    menu.lisaa(tomaatti); 
    RaakaAine sipuli = new RaakaAine(); 
    sipuli.rekisteroi(); 
    menu.lisaa(sipuli); 
    menu.lisaa(sipuli); 
    assertEquals("From: Menu line: 346", 0, menu.annaRaakaAineIndex(tomaatti.getRaakaAineenId())); 
    assertEquals("From: Menu line: 347", 1, menu.annaRaakaAineIndex(sipuli.getRaakaAineenId())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaRaakaAineidenTyypinIndex365 */
  @Test
  public void testAnnaRaakaAineidenTyypinIndex365() {    // Menu: 365
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); 
    menu.lisaa(kasvis); 
    RaakaAineenTyyppi pasta = new RaakaAineenTyyppi(); 
    pasta.rekisteroi(); 
    menu.lisaa(pasta); 
    assertEquals("From: Menu line: 373", 0, menu.annaRaakaAineidenTyypinIndex(kasvis.getTyyppiId())); 
    assertEquals("From: Menu line: 374", 1, menu.annaRaakaAineidenTyypinIndex(pasta.getTyyppiId())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista423 */
  @Test
  public void testPoista423() {    // Menu: 423
    Menu menu = new Menu(); 
    Ateria laatikko = new Ateria(); 
    Ateria salaatti = new Ateria(); 
    Ateria keitto = new Ateria(); 
    Ateria kiusaus = new Ateria(); 
    menu.rekisteroi(laatikko); 
    menu.lisaa(laatikko); 
    menu.rekisteroi(salaatti); 
    menu.lisaa(salaatti); 
    menu.rekisteroi(keitto); 
    menu.lisaa(keitto); 
    menu.rekisteroi(kiusaus); 
    menu.poista(salaatti); 
    try {
    assertEquals("From: Menu line: 437", null, menu.annaAteriaIdlla(2)); 
    fail("Menu: 437 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    menu.lisaa(kiusaus); 
    menu.poista(keitto); 
    assertEquals("From: Menu line: 440", 3, menu.annaAteriaIndex(kiusaus.getAteriaId())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista456 */
  @Test
  public void testPoista456() {    // Menu: 456
    Menu menu = new Menu(); 
    AterianRaakaAine salaatinTomaatti = new AterianRaakaAine(); 
    AterianRaakaAine salaatinKurkku = new AterianRaakaAine(); 
    AterianRaakaAine keitonPeruna = new AterianRaakaAine(); 
    AterianRaakaAine kiusauksenPeruna = new AterianRaakaAine(); 
    menu.rekisteroi(salaatinTomaatti); 
    menu.lisaa(salaatinTomaatti); 
    menu.rekisteroi(salaatinKurkku); 
    menu.lisaa(salaatinKurkku); 
    menu.rekisteroi(keitonPeruna); 
    menu.lisaa(keitonPeruna); 
    menu.poista(salaatinKurkku); 
    assertEquals("From: Menu line: 469", null, menu.annaAterianRaakaAine(1)); 
    menu.rekisteroi(kiusauksenPeruna); 
    menu.lisaa(kiusauksenPeruna); 
    keitonPeruna.setRaakaAineId(2); kiusauksenPeruna.setRaakaAineId(2); 
    menu.poista(keitonPeruna); 
    menu.poista(keitonPeruna); 
    assertEquals("From: Menu line: 475", null, menu.annaAterianRaakaAine(2)); 
    assertEquals("From: Menu line: 476", kiusauksenPeruna, menu.annaAterianRaakaAine(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista492 */
  @Test
  public void testPoista492() {    // Menu: 492
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    RaakaAine kurkku = new RaakaAine(); 
    RaakaAine peruna = new RaakaAine(); 
    RaakaAine bataatti = new RaakaAine(); 
    menu.rekisteroi(tomaatti); 
    menu.lisaa(tomaatti); 
    menu.rekisteroi(kurkku); 
    menu.lisaa(kurkku); 
    menu.rekisteroi(peruna); 
    menu.lisaa(peruna); 
    menu.poista(kurkku); 
    assertEquals("From: Menu line: 505", null, menu.annaRaakaAine(1)); 
    menu.rekisteroi(bataatti); 
    menu.lisaa(bataatti); 
    peruna.setTyyppiId(2); bataatti.setTyyppiId(2); 
    menu.poista(peruna); 
    assertEquals("From: Menu line: 510", null, menu.annaRaakaAine(2)); 
    assertEquals("From: Menu line: 511", bataatti, menu.annaRaakaAine(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista527 */
  @Test
  public void testPoista527() {    // Menu: 527
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    RaakaAineenTyyppi kala = new RaakaAineenTyyppi(); 
    RaakaAineenTyyppi peruna = new RaakaAineenTyyppi(); 
    RaakaAineenTyyppi riisi = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); 
    menu.lisaa(kasvis); 
    kala.rekisteroi(); 
    menu.lisaa(kala); 
    peruna.rekisteroi(); 
    menu.lisaa(peruna); 
    menu.poista(kala); 
    assertEquals("From: Menu line: 540", null, menu.annaRaakaAineenTyyppi(1)); 
    riisi.rekisteroi(); 
    menu.lisaa(riisi); 
    menu.poista(peruna); 
    assertEquals("From: Menu line: 544", null, menu.annaRaakaAineenTyyppi(2)); 
    assertEquals("From: Menu line: 545", riisi, menu.annaRaakaAineenTyyppi(3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeAterioidenRaakaAineet585 */
  @Test
  public void testHaeAterioidenRaakaAineet585() {    // Menu: 585
    Menu menu = new Menu(); 
    Ateria salaatti = new Ateria(); salaatti.rekisteroi(); menu.lisaa(salaatti); 
    AterianRaakaAine salaatinTomaatti = new AterianRaakaAine(); 
    menu.lisaa(salaatinTomaatti); salaatinTomaatti.setAteriaId(1); salaatinTomaatti.setRaakaAineId(1); 
    AterianRaakaAine salaatinKurkku = new AterianRaakaAine(); 
    menu.lisaa(salaatinKurkku); salaatinKurkku.setAteriaId(1); salaatinKurkku.setRaakaAineId(2); 
    AterianRaakaAine spagetinTomaatti = new AterianRaakaAine(); 
    menu.lisaa(spagetinTomaatti); spagetinTomaatti.setAteriaId(2); spagetinTomaatti.setRaakaAineId(1); 
    AterioidenRaakaAineet ar; 
    ar = menu.haeAterioidenRaakaAineet(1); 
    assertEquals("From: Menu line: 596", salaatinTomaatti, ar.anna(0)); 
    assertEquals("From: Menu line: 597", 2, ar.getLkm()); 
    ar = menu.haeAterioidenRaakaAineet(2); 
    assertEquals("From: Menu line: 599", spagetinTomaatti, ar.anna(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testSetTyyppi618 */
  @Test
  public void testSetTyyppi618() {    // Menu: 618
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); menu.lisaa(kasvis); kasvis.setNimi("kasvis"); 
    RaakaAine sipuli = new RaakaAine(); sipuli.rekisteroi(); menu.lisaa(sipuli); 
    menu.setTyyppi(sipuli, "kasvis"); 
    assertEquals("From: Menu line: 624", sipuli.getTyyppiId(), kasvis.getTyyppiId()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeTyyppiNimella639 */
  @Test
  public void testHaeTyyppiNimella639() {    // Menu: 639
    Menu menu = new Menu(); 
    RaakaAineenTyyppi kasvis = new RaakaAineenTyyppi(); 
    kasvis.rekisteroi(); menu.lisaa(kasvis); kasvis.setNimi("kasvis"); 
    assertEquals("From: Menu line: 643", kasvis, menu.haeTyyppiNimella("kasvis")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeRaakaAineNimella658 */
  @Test
  public void testHaeRaakaAineNimella658() {    // Menu: 658
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    RaakaAine kurkku = new RaakaAine(); 
    menu.rekisteroi(tomaatti); 
    menu.lisaa(tomaatti); tomaatti.setNimi("tomaatti"); 
    menu.rekisteroi(kurkku); 
    menu.lisaa(kurkku); kurkku.setNimi("kurkku"); 
    assertEquals("From: Menu line: 666", tomaatti, menu.haeRaakaAineNimella("tomaatti")); 
    assertEquals("From: Menu line: 667", kurkku, menu.haeRaakaAineNimella("kurkku")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetListaRaakaAineista680 */
  @Test
  public void testGetListaRaakaAineista680() {    // Menu: 680
    Menu menu = new Menu(); 
    RaakaAine tomaatti = new RaakaAine(); 
    RaakaAine kurkku = new RaakaAine(); 
    RaakaAine peruna = new RaakaAine(); 
    menu.rekisteroi(tomaatti); 
    menu.lisaa(tomaatti); tomaatti.setNimi("tomaatti"); 
    menu.rekisteroi(kurkku); 
    menu.lisaa(kurkku); kurkku.setNimi("kurkku"); 
    menu.rekisteroi(peruna); 
    menu.lisaa(peruna); peruna.setNimi("peruna"); 
    ArrayList<String> aineet = (ArrayList<String>)menu.getListaRaakaAineista(); 
    assertEquals("From: Menu line: 693", "kurkku", aineet.get(0)); 
    assertEquals("From: Menu line: 694", "peruna", aineet.get(1)); 
    assertEquals("From: Menu line: 695", "tomaatti", aineet.get(2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiAteriat713 */
  @Test
  public void testEtsiAteriat713() {    // Menu: 713
    Menu menu = new Menu(); 
    Ateria salaatti = new Ateria(); salaatti.setAika("iltapala"); menu.lisaa(salaatti); 
    Ateria keitto = new Ateria(); keitto.setAika("päivällinen"); menu.lisaa(keitto); 
    Ateria makaroonilaatikko = new Ateria(); makaroonilaatikko.setAika("päivällinen"); menu.lisaa(makaroonilaatikko); 
    Ateria makkaraperunat = new Ateria(); makkaraperunat.setAika("iltapala"); menu.lisaa(makkaraperunat); 
    ArrayList<Ateria> ateriat = (ArrayList<Ateria>)menu.etsiAteriat("iltapala"); 
    assertEquals("From: Menu line: 720", salaatti, ateriat.get(0)); 
    assertEquals("From: Menu line: 721", makkaraperunat, ateriat.get(1)); 
  } // Generated by ComTest END
}